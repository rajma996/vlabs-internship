#+TITLE: Building a Web application: Ground up to the cloud 
#+AUTHOR: Raj Manvar
#+Date: [2016-05-17 Tue]

* Broad Idea 
** Server-Client model
   Web application is a client server model, where client sends a request in
   some format which is processed by the server and the answer is sent
   back.  The server has a database with it which is the main essence of the
   server.  All the requests are answered based on the content in the
   database.  The request may also be a request to edit the database.
** data Model:
   Data model is way in which the data will be stored in the server database.

* Flow of a request
** request flow
   The client sends a request in form of some link or buttons on the browser
   which is converted to appropriate format and sent to the client .
   The client then interprets the request and based on the content of the
   database answers, the response is then interpreted again by the client and
   then appropriate response is shown on the browser

* Interfaces
** Rest API
   The rest api is the way or method in which the URL entered by the client is
   interpreted by the client.
** consistent API
   The interface between the client process and the database.
** Many other interfaces also are present

* Life Cycle 
** SDLC
   The webapp never stops is a sense that constantly new requests come up to
   the client process which is responded back by the client. 
   Various steps like version control, requirement gathering, testing,
   deployment are a part of developing a webapp. 

* List of technologies


  -[[http://www.python.org][ python]] :: Python will be the main language of implementation. Version to be
       used is 2.7 (not 3.x versions)
  - [[http://flask.pocoo.org/][flask]] :: Flask is framework for web application development in python.
  - [[http://www.javascript.com][Javascript]] :: Javascript is used for client side validation.
  - [[http://www.mysql.com][Mysql]] :: for storing and quering the database . 

* Diagram 
** [[./image.jpg][Image for client-server model ]]


* Requirement gathering

  Requirement gathering includes asking the client about all the requirements
  the software has to fulfill.  There can be many loopholes in the beginning
  which needs to be taken care in the beginning, and can be removed by
  formalizing all the requirements.

* Data-model 

** notation 
   B or B* - zero or more of B
   B? - atmost 1 of B
   B! - exactly one of B
   B+ - atleast 1 of B

** relation 
   r : A > B  this denotes that there exists a relation between A and B
   we can use notation here 
   Ex. r : A > B! this shows for all a in A there is exactly one b in B. This
   is denotion of function.

** Relation notation :

   [ a,b ] : A+ > B? 
   a is a relation a : A > B?
   and b : B > A+
   and a is inverse of b

** system 
   
   Based on the input and the state, the system gives an output.

** Entities and Relation 

   entity is something about which some data is stored .  Based on the
   requirements of the client, we need to define relations between these
   entities. to completely define the entities well, we require relation from
   one entity to another and an inverse relation as well.

** Entity sets 
   
   The entity sets are the sets which have entity elements within them.
   For ex: the set of users who are currently logged in.

** Entity set relations

   The relations between these entity sets .

** Diagram notation 

   [ a,b ] : A+ > B! can be denoted as [[./entity_relation.jpg][image]] .

** System variable
   
   The variables which define the state in which the system is at present .
   This mainly includes the entity and entity set.  Based on these variables
   the state of the system is determined which will then define what output
   corresponds to input . 
   

